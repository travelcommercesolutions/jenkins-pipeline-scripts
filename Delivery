import groovy.util.*
import jobs.scripts.*
import groovy.json.JsonSlurperClassic

def SETTINGS

def DELIVERY_BACKEND = false
def DELIVERY_FRONTEND = false
def DELIVERY_THEME = false
def UPDATE_CS = false
def UPDATE_PLATFORM = false
def UPDATE_IMAGE = false
def UPDATE_MODULE = false
def LOGIC_APPS = false

def UNSTABLE = false
def CAUSES = []

def PLATFORM_VERSION
def PROJECT_TYPE
def BACKEND_FILE
def FRONTEND_FILE
def THEME_FILE
def MODULE_ID
def MODULE_FILE
def ENV_NAME
def LOGICAPP_FILE
def LOGICAPP_NAME

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_PREFIX
def DOCKER_TAG

def PROJECT_TYPES

pipeline {
    agent any

    options{
        timestamps()
    }
    
    stages{
        stage("User Input"){
            steps{
                script{
                    def settingsFileContent
                    configFileProvider([configFile(fileId: 'delivery_settings', variable: 'SETTINGS_FILE')]) {
                        settingsFileContent = readFile(SETTINGS_FILE)
                    }
                    SETTINGS = new Settings(settingsFileContent)
                    def buildOrder = Utilities.getNextBuildOrder(this)
                    def regionAndEnvChoices = input message: "Select Environment", parameters: [
                        booleanParam(name: 'logicApps', defaultValue: false),
                        choice(name: 'Environments', choices:"DEV\nQA\nSTAGE01\nSTAGE02\nPROD\n")
                    ]
                    LOGIC_APPS = regionAndEnvChoices['logicApps']
                    PROJECT_TYPE = 'SOLUTION'
                    UPDATE_CS = true
                    ENV_NAME = regionAndEnvChoices['Environments']
                    SETTINGS.setRegion(PROJECT_TYPE)
                    SETTINGS.setEnvironment(ENV_NAME)
                    echo "Vars: PROJECT_TYPE - ${PROJECT_TYPE}, UPDATE_CS - ${UPDATE_CS}, ENV_NAME - ${ENV_NAME}" //, LOGIC_APPS - ${LOGIC_APPS}
                    def msgToHook = "Delivery Option ${PROJECT_TYPE}<br/>Environment ${ENV_NAME}<br/>${UPDATE_CS ? "Update Solution<br/>":""}"
                    //Utilities.notifyBuildStatus(this, SETTINGS['prefix'], SETTINGS['of365hook'], msgToHook, 'STARTED')
                }
                buildDescription "Delivered to ${ENV_NAME}"
            }
        }

        stage("Preparing Solution"){
            when{
                expression {
                    UPDATE_CS
                }
            }
            steps{
                script{
                    def csSrc = "${env.SOLUTION_FOLDER}\\tcs\\master"
                    switch(ENV_NAME){
                        case 'DEV':
                        csSrc = "${env.SOLUTION_FOLDER}\\tcs\\dev"
                        break
                    }
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    def platformRoot = "${env.WORKSPACE}\\CS\\platform"

                    SETTINGS.setEnvironment('DEV-ETALON')

                    //Cleaning environment before actions to deploy
                    powershell "Remove-Item ${env.WORKSPACE}\\CS\\* -Recurse -Force"
                    //Get modules from dev invironment
                    powershell "${env.WORKSPACE}\\resources\\azure\\delivery\\get-modules.ps1 -PlatformPath ${platformRoot} -ModulesPath ${modulesRoot} -AppName \"${SETTINGS['appName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -ErrorAction Stop"
                    // powershell "Expand-Archive -Path ${env.SOLUTION_FOLDER}\\etalon-app.zip -DestinationPath ${env.WORKSPACE}\\CS -Force"
                    powershell "Remove-Item ${modulesRoot}\\Travel* -Recurse -Force"
                    powershell "Remove-Item ${modulesRoot}\\TCS* -Recurse -Force"
                    powershell "Copy-Item -Path ${csSrc}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    powershell "Rename-Item -Path ${modulesRoot} -NewName modules"
                }
            }
        }

        stage("Delivering Platform and Modules"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def csRoot = "${env.WORKSPACE}\\CS"
                    switch(ENV_NAME){
                        case 'DEV':
                        SETTINGS.setEnvironment("TCS-ADMIN-${ENV_NAME}")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        case 'QA':
                        1.upto(2) {
                            SETTINGS.setEnvironment("TCS-ADMIN-${ENV_NAME}-EU0${it}")

                            def webAppName = SETTINGS['appName']
                            def webAppPublicName = SETTINGS['webAppPublicName']
                            def resourceGroupName = SETTINGS['resourceGroupName']
                            def subscriptionID = SETTINGS['subscriptionID']
                            def blobToken = SETTINGS['blobToken']
                            withEnv(["AzureBlobToken=${blobToken}"]){
                                Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                    // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                    "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                }
                            }
                        break
                        case 'STAGE01':
                        SETTINGS.setEnvironment("TCS-ADMIN-${ENV_NAME}-EU01")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        case 'STAGE02':
                        SETTINGS.setEnvironment("TCS-ADMIN-${ENV_NAME}-EU02")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        }
                    }
                }
            }

        stage("Delivering Storefront"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def csRoot = "${env.WORKSPACE}\\CS"
                    switch(ENV_NAME){
                        case 'DEV':
                        SETTINGS.setEnvironment("TCS-PUBLIC-${ENV_NAME}")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-StorefrontDir ${csRoot}\\storefront -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        case 'QA':
                        1.upto(2) {
                            SETTINGS.setEnvironment("TCS-PUBLIC-${ENV_NAME}-EU0${it}")

                            def webAppName = SETTINGS['appName']
                            def webAppPublicName = SETTINGS['webAppPublicName']
                            def resourceGroupName = SETTINGS['resourceGroupName']
                            def subscriptionID = SETTINGS['subscriptionID']
                            def blobToken = SETTINGS['blobToken']
                            withEnv(["AzureBlobToken=${blobToken}"]){
                                Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                    // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                    "-StorefrontDir ${csRoot}\\storefront -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                }
                            }
                        break
                        case 'STAGE01':
                        SETTINGS.setEnvironment("TCS-PUBLIC-${ENV_NAME}-EU01")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-StorefrontDir ${csRoot}\\storefront -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        case 'STAGE02':
                        SETTINGS.setEnvironment("TCS-PUBLIC-${ENV_NAME}-EU02")

                        def webAppName = SETTINGS['appName']
                        def webAppPublicName = SETTINGS['webAppPublicName']
                        def resourceGroupName = SETTINGS['resourceGroupName']
                        def subscriptionID = SETTINGS['subscriptionID']
                        def blobToken = SETTINGS['blobToken']
                        withEnv(["AzureBlobToken=${blobToken}"]){
                            Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                                // "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${csRoot}\\theme -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                                "-StorefrontDir ${csRoot}\\storefront -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID}")
                            }
                        break
                        }
                    }
                }
            }
        
        stage("Delivering Backend"){
            when{
                expression{
                    DELIVERY_BACKEND
                }
            }
            steps{
                script{
                    if(ENV_NAME == 'ACC'){
                        echo "Octopus api: ${env.OCTOPUS_USR}"
                        def res = powershell script: "${env.Utils}\\octopus\\octo.exe push --package ${BACKEND_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus:true
                        if(res != 0){
                            UNSTABLE = true
                            CAUSES.add("Delivering Backend: octopus failed")
                        }
                    }
                    else{
                        def contentPath = "platform"
                        if(DELIVERY_BACKEND)
                            contentPath = ""
                        runPS("Deploy-ToAzure.ps1", "-ZipFile ${BACKEND_FILE} -WebAppName \"${SETTINGS['webAppName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"${contentPath}\"")
                    }
                }
            }
        }
        stage("Delivering Storefront deprecated"){
            when{
                expression{
                    DELIVERY_FRONTEND
                }
            }
            steps{
                script{
                    if(ENV_NAME == 'ACC'){
                        if(DELIVERY_BACKEND){
                            sleep time:5, unit:'MINUTES'
                        }
                        def res = powershell script:"${env.Utils}\\octopus\\octo.exe push --package ${FRONTEND_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus:true
                        if(res != 0){
                            UNSTABLE = true
                            CAUSES.add("Delivering Storefront: octopus failed")
                        }
                    } else {
                        def tmpFrontendPath = "${env.WORKSPACE}@tmp\\frontendTemp"
                        dir(tmpFrontendPath){
                            deleteDir()
                            powershell "Expand-Archive -Path ${FRONTEND_FILE} -DestinationPath ."
                            powershell "Remove-Item ${FRONTEND_FILE} -Force"
                            powershell "Expand-Archive -Path ${THEME_FILE} -DestinationPath .\\wwwroot\\theme"
                            zip dir: tmpFrontendPath, zipFile: FRONTEND_FILE
                        }
                        runPS("Deploy-ToAzure.ps1", "-ZipFile ${FRONTEND_FILE} -WebAppName \"${SETTINGS['webAppPublicName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\"")
                    }
                }
            }
        }
        stage("Delivering Theme"){
            when{
                expression{
                    DELIVERY_THEME
                }
            }
            steps{
                script{
                    if(ENV_NAME == 'ACC'){
                        if(DELIVERY_BACKEND){
                            sleep time:5, unit:'MINUTES'
                        }
                        def res = powershell script: "${env.Utils}\\octopus\\octo.exe push --package ${THEME_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus: true
                        if(res != 0){
                            UNSTABLE = true
                            CAUSES.add("Delivering Theme: octopus failed")
                        }
                    } else {
                        runPS("Deploy-ToAzure.ps1", "-ZipFile ${THEME_FILE} -WebAppName \"${SETTINGS['webAppPublicName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"wwwroot\\theme\"")
                    }
                }
            }
        }

        stage("Updating Platform"){
            when{
                expression{
                    return UPDATE_PLATFORM && !DELIVERY_BACKEND
                }
            }
            steps{
                runPS("Deploy-ToAzure.ps1", "-ZipFile ${BACKEND_FILE} -WebAppName \"${SETTINGS['webAppName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"platform\"")
            }
        }

        stage("Updating Module"){
            when{
                expression{
                    UPDATE_MODULE
                }
            }
            steps{
                script{
                    runPS("VC-Module2AzureDev.ps1", "-Prefix ${SETTINGS['prefix']} -ModuleName ${MODULE_ID} -Path2Zip ${MODULE_FILE} -BranchName ${ENV_NAME}")
                }
            }
        }

        stage("Updating Platform Docker Image"){
            when{
                expression{
                    return UPDATE_IMAGE && ENV_NAME != 'None'
                }
            }
            steps{      
                script{  
                    node(SETTINGS['agentLabel'] ?: 'master') {
                        deleteDir()       
                        unstash name: 'platform'
                        unzip zipFile: 'Platform.zip', dir: 'VirtoCommerce.Platform'
                        def dstConfigPath = "${env.WORKSPACE}\\VirtoCommerce.Platform\\platform\\Web.config"
                        def srcConfigPath = "${env.WORKSPACE}\\${SETTINGS['config']}"
                        powershell "${env.WORKSPACE}\\combine-configs.ps1 -srcConfigPath ${srcConfigPath} -dstConfigPath ${dstConfigPath} -ErrorAction Stop"
                        def dockerImage = docker.build("${SETTINGS['prefix']}-platform:${SETTINGS['dockerTag']}")
                    }
                }
            }
        }
        stage('Preparing Logic Apps'){
            when{
                expression{
                    LOGIC_APPS
                }
            }
            steps{
                script{
                    def prefix = "tcs"
                    def logicAppsDir = "${env.WORKSPACE}\\LogicApps"
                    def logicAppsRoot = logicAppsDir // usually azure group here
                    dir(logicAppsDir){
                        deleteDir()
                        git branch: 'master', credentialsId: env.GITHUB_CREDENTIALS_ID, url: "https://github.com/travelcommercesolutions/${prefix}-logic-apps.git"

                        def apps = getSubfolders(logicAppsRoot)
                        def logicApp = input message:"Select Logic App", parameters:[choice(name: 'logicApp', choices: apps.join("\n"))]
                        def appDir = "${logicAppsRoot}\\${logicApp}"
                        LOGICAPP_NAME = logicApp
                        LOGICAPP_FILE = appDir
                    }
                }
            }
        }
        stage('Delivery Logic App'){
            when{
                expression{
                    LOGIC_APPS
                }
            }
            steps{
                script{
                    def templateFile = "${LOGICAPP_FILE}\\LogicApp-${LOGICAPP_NAME}.json"
                    def envname = ENV_NAME.toLowerCase()
                    def templateParametersFile = "${LOGICAPP_FILE}\\LogicApp-${LOGICAPP_NAME}.parameters.${envname}.json"
                    def REGION = "tcs"
                    prepareParamFile(REGION, LOGICAPP_NAME, ENV_NAME, templateParametersFile) // in case external settings needed
                    powershell "${env.WORKSPACE}\\resources\\azure\\delivery\\Deploy-LogicApps.ps1 -SubscriptionID ${SETTINGS['subscriptionID']} -ResourceGroupName ${SETTINGS['resourceGroupName']} -TemplateFile ${templateFile} -TemplateParametersFile ${templateParametersFile}"
                }
            }
        }
    }
    post{
        always{
            script{
                if(UNSTABLE && currentBuild.result != 'FAILED'){
                    currentBuild.result = 'UNSTABLE'
                    Utilities.checkLogForWarnings(this)
                }
                //Utilities.notifyBuildStatus(this, SETTINGS['prefix'], SETTINGS['of365hook'], "", currentBuild.result)
                if(!UPDATE_CS && (PROJECT_TYPE=='HOT' || PROJECT_TYPE=='RW1')){
                    node(SETTINGS['agentLabel']){
                        withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PREFIX=${DOCKER_PREFIX}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]){
                            bat "docker-compose down -v"
                        }
                        bat "docker image prune -f"
                    }
                    //Utilities.generateAllureReport(this)
                    def slave = SETTINGS['agentLabel']
                    if(slave != null){
                        try{
                            unstash 'allure'
                        }
                        catch(any){
                            echo any.getMessage()
                        }
                    }
                    allure results: [[path: "allure-results-${PROJECT_TYPE}"]]
                }
                if(CAUSES.size() > 0){
                    echo "UNSTABLE's Causes:"
                    for(cause in CAUSES){
                        echo cause
                    }
                }
            }
        }
    }
}
def prepareParamFile(REGION, LOGICAPP_NAME, ENV_NAME, templateParametersFile){
    configFileProvider([configFile(fileId: 'logicapp-params', variable: 'PARAMS_FILE')]) {
        def paramsFileContent = readFile(PARAMS_FILE)
        def paramsJson = parseJsonFile(paramsFileContent)
        def logicAppParamNames = paramsJson[REGION][LOGICAPP_NAME][ENV_NAME].keySet() as String[]
        echo "read param file ${templateParametersFile}"
        def dstParamFileContent = readFile(templateParametersFile)
        if(dstParamFileContent == null){
            echo "dstParamFileContent is null"
        }
        else 
            echo "read success"
        def dstParamJson = parseJsonFile(dstParamFileContent)
        for(logicAppParameter in logicAppParamNames){
            dstParamJson['parameters'][logicAppParameter]['value'] = paramsJson[REGION][LOGICAPP_NAME][ENV_NAME][logicAppParameter]
        }
        def json = groovy.json.JsonOutput.toJson(dstParamJson)
        json = groovy.json.JsonOutput.prettyPrint(json)
        writeFile(file:templateParametersFile, text: json)
    }
}

@NonCPS
def parseJsonFile(fileContent){
    return new groovy.json.JsonSlurperClassic().parseText(fileContent)
}

def runPS(psName, args){
    def psPath = libraryResource "delivery/${psName}"
    echo "dbg: ${psPath} ${args}"
    powershell "${psPath} ${args} -ErrorAction Stop"
}

def getVirtoModules() {
    def modulesJsonUrl = "https://raw.githubusercontent.com/VirtoCommerce/vc-modules/master/modules.json"
    def response = httpRequest httpMode:'GET', responseHandle: 'STRING', url:modulesJsonUrl
    def content = response.content
    return new JsonSlurperClassic().parseText(content)
}

def downloadVirtoModule(url, path){
    httpRequest acceptType: 'APPLICATION_OCTETSTREAM', httpMode: 'GET', outputFile: path, responseHandle: 'NONE', url: url
}

def getDeliveryInfo() {
    def deliveryFile = readFile("C:\\CICD\\delivery.json")
    return new JsonSlurperClassic().parseText(deliveryFile)
}

def updateDeliveryInfo(data){
    def json = groovy.json.JsonOutput.toJson(data)
    json = groovy.json.JsonOutput.prettyPrint(json)
    writeFile(file:"C:\\CICD\\delivery.json", text: json)
}

@NonCPS
def getSubfolders(path){
    def  dirsl = [] 
    new File(path).eachDir()
    {
        dirs ->
        if (!dirs.getName().startsWith('.')) {
            dirsl.add(dirs.getName())
        }
    }
    return dirsl
}
